@page "/"
@using BattleshipsSimulation.Models

<div class="container-xl">
    <div class="row text-center">
        <h1> Battleship Simulation </h1>
    </div>
    <div class="row mt-4">
        <div class="col-sm text-center">
            <h4>Player1 Board</h4>
            <h5>Wins: @Player1.WinCount</h5>

            <table class="ship-board">
                @for (int i = 1; i <= 10; i++)
                {
                    <tr>
                        @for (int j = 1; j <= 10; j++)
                        {
                            @if (Player1.Cells.First(x => x.X == i && x.Y == j).IsEmpty == true)
                            {
                                <td class="ship-tile blue @(Player1.Cells.First(x => x.X == i && x.Y == j).IsEmpty)">
                                    <div style="width:35px;height:35px;"></div>
                                </td>
                            }
                            @if (Player1.Cells.First(x => x.X == i && x.Y == j).IsHit == true)
                            {
                                <td class="ship-tile hit @(Player1.Cells.First(x => x.X == i && x.Y == j).IsEmpty)">
                                    <div style="width:35px;height:35px;">HIT</div>
                                </td>
                            }
                            @if (Player1.Cells.First(x => x.X == i && x.Y == j).IsMiss == true)
                            {
                                <td class="ship-tile miss @(Player1.Cells.First(x => x.X == i && x.Y == j).IsEmpty)">
                                    <div style="width:35px;height:35px;">MISS</div>
                                </td>
                            }
                        }
                    </tr>
                }
            </table>
            <br />
            <p>Lives left: @Player1.Lives</p>

        </div>
        <div class="col-sm text-center mt-xxl-5">
            <button class="btn btn-lg btn-primary" disabled=@IsStarted @onclick="@StartSimulation">Start</button>
            <br />
            @if (IsEnded)
            {
                <button class="btn btn-lg btn-info" @onclick="@StartAnotherSimulation">Next one?</button>
            }
        </div>
        <div class="col-sm text-center">
            <h4>Player2 Board</h4>
            <h5>Wins: @Player2.WinCount</h5>

            <table class="ship-board">
                @for (int i = 1; i <= 10; i++)
                {
                    <tr>
                        @for (int j = 1; j <= 10; j++)
                        {
                            @if (Player2.Cells.First(x => x.X == i && x.Y == j).IsEmpty == true)
                            {
                                <td class="ship-tile blue @(Player2.Cells.First(x => x.X == i && x.Y == j).IsEmpty)">
                                    <div style="width:35px;height:35px;"></div>
                                </td>
                            }
                            @if (Player2.Cells.First(x => x.X == i && x.Y == j).IsHit == true)
                            {
                                <td class="ship-tile hit @(Player2.Cells.First(x => x.X == i && x.Y == j).IsEmpty)">
                                    <div style="width:35px;height:35px;">HIT</div>
                                </td>
                            }
                            @if (Player2.Cells.First(x => x.X == i && x.Y == j).IsMiss == true)
                            {
                                <td class="ship-tile miss @(Player2.Cells.First(x => x.X == i && x.Y == j).IsEmpty)">
                                    <div style="width:35px;height:35px;">MISS</div>
                                </td>
                            }
                        }
                    </tr>
                }
            </table>
            <br />
            <p>Lives left: @Player2.Lives</p>
        </div>
        <div class="row text-center">
            @if (Player1.Lives == 0)
            {
                <h3>Player2 Win this battle!</h3>
            }
            @if (Player2.Lives == 0)
            {
                <h3>Player1 Win this battle!</h3>
            }
        </div>
    </div>
    <footer class="text-center">
        <br />
        <br />
        <p>My GitHub : <a href="https://github.com/LukSt92">https://github.com/LukSt92</a></p>
    </footer>
</div>

@code {
    Player Player1 { get; set; }
    Player Player2 { get; set; }

    bool IsStarted = false;
    bool IsEnded = false;

    protected override async Task OnInitializedAsync()
    {
        Player1 = new Player()
            {
                Lives = 17,
                IsMyTurn = true
            };
        Player2 = new Player()
            {
                Lives = 17,
                IsMyTurn = false
            };

        await GameMechanics.DataGenerator.GenerateBoard(Player1);
        await GameMechanics.DataGenerator.GenerateBoard(Player2);

        await GameMechanics.DataGenerator.GenerateShips(Player1);
        await GameMechanics.DataGenerator.GenerateShips(Player2);
    }

    async Task StartAnotherSimulation()
    {
        Player1.Lives = 17;
        Player2.Lives = 17;

        await GameMechanics.DataGenerator.GenerateBoard(Player1);
        await GameMechanics.DataGenerator.GenerateBoard(Player2);

        await GameMechanics.DataGenerator.GenerateShips(Player1);
        await GameMechanics.DataGenerator.GenerateShips(Player2);

        await StartSimulation();
    }


    // Simulation works until one of players loses all Cells with ships (Player.Lives).
    // starting player is always player one. I added Wait task using Delay for smoother simulation.
    async Task StartSimulation()
    {
        IsStarted = true;
        IsEnded = false;

        while (Player1.Lives > 0 || Player2.Lives > 0)
        {
            if (Player1.IsMyTurn == true)
            {
                await Shot(Player2);
                Player2.IsMyTurn = true;
                Player1.IsMyTurn = false;
                await Wait();
                StateHasChanged();

                if (Player2.Lives == 0)
                {
                    Player1.WinCount++;
                    IsEnded = true;
                    break;
                }
            }



            if (Player2.IsMyTurn == true)
            {
                await Shot(Player1);
                Player1.IsMyTurn = true;
                Player2.IsMyTurn = false;
                await Wait();
                StateHasChanged();

                if (Player1.Lives == 0)
                {
                    Player2.WinCount++;
                    IsEnded = true;
                    break;
                }
            }


        }

    }


    // There are two types of shots, Random one which is used when there are no hit cells on the board.
    // this shot first takes every single cell that is not discovered to the List (IsHit means that this is cell with hit ship and IsMiss means that this cell is empty and already discovered)
    // Then it draws from this List random cell and checks it using SelectCell task, explained in GameMechanics.DataGenerator
    // The second type of shot is targeted shot but this one draws a single cell from different List which contains cells that surrounds hit cells and are not discovered.
    async Task Shot(Player player)
    {
        var rnd = new Random();

        var availableCells = player.Cells.Where(x => !x.IsHit && !x.IsMiss).ToList();
        int avCellsCount = availableCells.Count();

        var availableTargets = player.Cells.Where(x => x.IsTarget && !x.IsHit && !x.IsMiss).ToList();
        var targetsCount = availableTargets.Count();

        if (availableTargets.Any())
        {
            await GameMechanics.DataGenerator.SelectCell(availableTargets.ElementAt(rnd.Next(0, targetsCount)), player);
        }
        else
            await GameMechanics.DataGenerator.SelectCell(availableCells.ElementAt(rnd.Next(0, avCellsCount)), player);

    }

    async Task Wait()
    {
        await Task.Delay(10);
    }
}