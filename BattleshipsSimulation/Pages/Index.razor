@page "/"
@using BattleshipsSimulation.Models
<div class="row text-center">
    <h1> Battleship Simulation </h1>
</div>
<div class="row mt-4">
    <div class="col-sm text-center">
        <h4>Player1 Board</h4>
        <h5>Wins: @Player1.WinCount</h5>

        <table class="ship-board">
            @for (int i = 1; i <= 10; i++)
            {
                <tr>
                    @for (int j = 1; j <= 10; j++)
                    {
                        @if (Player1.Cells.First(x => x.X == i && x.Y == j).IsEmpty == true)
                        {
                            <td class="ship-tile blue @(Player1.Cells.First(x => x.X == i && x.Y == j).IsEmpty)">
                                <div style="width:35px;height:35px;"></div>
                            </td>
                        }
                        @if (Player1.Cells.First(x => x.X == i && x.Y == j).IsHit == true)
                        {
                            <td class="ship-tile hit @(Player1.Cells.First(x => x.X == i && x.Y == j).IsEmpty)">
                                <div style="width:35px;height:35px;">HIT</div>
                            </td>
                        }
                        @if (Player1.Cells.First(x => x.X == i && x.Y == j).IsMiss == true)
                        {
                            <td class="ship-tile miss @(Player1.Cells.First(x => x.X == i && x.Y == j).IsEmpty)">
                                <div style="width:35px;height:35px;">MISS</div>
                            </td>
                        }
                    }
                </tr>
            }
        </table>
        <br />
        <p>Lives left: @Player1.Lives</p>

    </div>
    <div class="col-sm text-center mt-xxl-5">
        <button class="btn btn-lg btn-primary" disabled=@IsStarted @onclick="@StartSimulation">Start</button>
        <br />
        @if (IsEnded)
        {
            <button class="btn btn-lg btn-info" @onclick="@StartAnotherSimulation">Next one?</button>
        }
    </div>
    <div class="col-sm text-center">
        <h4>Player2 Board</h4>
        <h5>Wins: @Player2.WinCount</h5>

        <table class="ship-board">
            @for (int i = 1; i <= 10; i++)
            {
                <tr>
                    @for (int j = 1; j <= 10; j++)
                    {
                        @if (Player2.Cells.First(x => x.X == i && x.Y == j).IsEmpty == true)
                        {
                            <td class="ship-tile blue @(Player2.Cells.First(x => x.X == i && x.Y == j).IsEmpty)">
                                <div style="width:35px;height:35px;"></div>
                            </td>
                        }
                        @if (Player2.Cells.First(x => x.X == i && x.Y == j).IsHit == true)
                        {
                            <td class="ship-tile hit @(Player2.Cells.First(x => x.X == i && x.Y == j).IsEmpty)">
                                <div style="width:35px;height:35px;">HIT</div>
                            </td>
                        }
                        @if (Player2.Cells.First(x => x.X == i && x.Y == j).IsMiss == true)
                        {
                            <td class="ship-tile miss @(Player2.Cells.First(x => x.X == i && x.Y == j).IsEmpty)">
                                <div style="width:35px;height:35px;">MISS</div>
                            </td>
                        }
                    }
                </tr>
            }
        </table>
        <br />
        <p>Lives left: @Player2.Lives</p>
    </div>
    <div class="row text-center">
        @if (Player1.Lives == 0)
        {
            <h3>Player2 Win this battle!</h3>
        }
        @if (Player2.Lives == 0)
        {
            <h3>Player1 Win this battle!</h3>
        }
    </div>
</div>





@code {
    Player Player1 { get; set; }
    Player Player2 { get; set; }

    bool IsStarted = false;
    bool IsEnded = false;

    protected override async Task OnInitializedAsync()
    {
        Player1 = new Player()
            {
                Lives = 17,
                IsMyTurn = true
            };
        Player2 = new Player()
            {
                Lives = 17,
                IsMyTurn = false
            };

        await GameMechanics.DataGenerator.GenerateBoard(Player1);
        await GameMechanics.DataGenerator.GenerateBoard(Player2);

        await GameMechanics.DataGenerator.GenerateShips(Player1);
        await GameMechanics.DataGenerator.GenerateShips(Player2);
    }

    async Task StartAnotherSimulation()
    {
        Player1.Lives = 17;
        Player2.Lives = 17;

        await GameMechanics.DataGenerator.GenerateBoard(Player1);
        await GameMechanics.DataGenerator.GenerateBoard(Player2);

        await GameMechanics.DataGenerator.GenerateShips(Player1);
        await GameMechanics.DataGenerator.GenerateShips(Player2);

        await StartSimulation();
    }

    async Task StartSimulation()
    {
        IsStarted = true;
        IsEnded = false;

        while (Player1.Lives > 0 || Player2.Lives > 0)
        {
            if (Player1.IsMyTurn == true)
            {
                await Shot(Player2);
                Player2.IsMyTurn = true;
                Player1.IsMyTurn = false;
                await Wait();
                StateHasChanged();

                if (Player2.Lives == 0)
                {
                    Player1.WinCount++;
                    IsEnded = true;
                    break;
                }
            }



            if (Player2.IsMyTurn == true)
            {
                await Shot(Player1);
                Player1.IsMyTurn = true;
                Player2.IsMyTurn = false;
                await Wait();
                StateHasChanged();

                if (Player1.Lives == 0)
                {
                    Player2.WinCount++;
                    IsEnded = true;
                    break;
                }
            }


        }

    }

    async Task Shot(Player player)
    {
        var rnd = new Random();

        var availablecells = player.Cells.Where(x => !x.IsHit && !x.IsMiss).ToList();
        int indexcount = availablecells.Count();


        //NOT WORKING!
        //var destroyedTargets = player.Cells.Where(x => x.IsHit).ToList();
        //var possibleTargets = destroyedTargets;

        //foreach (var cell in destroyedTargets)
        //{
        //    if (cell.X > 1)
        //    {
        //        possibleTargets.Where(x => x.X == cell.X-- && x.Y == cell.Y && cell.IsEmpty == true).ToList();
        //    }
        //    if (cell.X < 10)
        //    {
        //        possibleTargets.Where(x => x.X == cell.X++ && x.Y == cell.Y && cell.IsEmpty == true).ToList();
        //    }
        //    if (cell.Y > 1)
        //    {
        //        possibleTargets.Where(x => x.Y == cell.Y-- && x.X == cell.X && cell.IsEmpty == true).ToList();
        //    }
        //    if (cell.Y < 10)
        //    {
        //        possibleTargets.Where(x => x.Y == cell.Y++ && x.X == cell.X && cell.IsEmpty == true).ToList();
        //    }
        //}

        //int targetCount = possibleTargets.Distinct().Where(x => x.IsEmpty == true).Count();


        //if (possibleTargets.Any())
        //    await GameMechanics.DataGenerator.SelectCell(destroyedTargets.ElementAt(rnd.Next(targetCount)), player);

        //else
        await GameMechanics.DataGenerator.SelectCell(availablecells.ElementAt(rnd.Next(0, indexcount)), player);

    }

    async Task Wait()
    {
        await Task.Delay(1);
    }
}