@page "/"
@using BattleshipsSimulation.Models
<div class="row">
    <div class="col-sm text-center">
        <h4>Player1 Board</h4>

        <table class="ship-board">
            @for (int i = 1; i <= 10; i++)
            {
                <tr>
                    @for (int j = 1; j <= 10; j++)
                    {
                        <td class="ship-tile @(Player1.Cells.First(x => x.X == i && x.Y == j).IsEmpty == true ? "blue" : "black")">
                            <div style="width:35px;height:35px;">
                                @if (Player1.Cells.First(x => x.X == i && x.Y == j).IsHit)
                                {
                                    <div class="hit">HIT</div>
                                }
                                @if (Player1.Cells.First(x => x.X == i && x.Y == j).IsMiss)
                                {
                                    <div class="miss">MISS</div>
                                }

                                </div>
                        </td>
                    }
                </tr>
            }
        </table>

    </div>
    <div class="col-sm text-center">
        <h4>Player2 Board</h4>

        <table class="ship-board">
            @for (int i = 1; i <= 10; i++)
            {
                <tr>
                    @for (int j = 1; j <= 10; j++)
                    {
                        <td class="ship-tile @(Player2.Cells.First(x => x.X == i && x.Y == j).IsEmpty == true ? "blue" : "black")">
                            <div style="width:35px;height:35px;">
                                @if (Player2.Cells.First(x => x.X == i && x.Y == j).IsHit)
                                {
                                    <div class="hit">HIT</div>
                                }
                                @if (Player2.Cells.First(x => x.X == i && x.Y == j).IsMiss)
                                {
                                    <div class="miss">MISS</div>
                                }
                                </div>
                        </td>
                    }
                </tr>
            }
        </table>

    </div>
    <div class="row">
        <button class="btn btn-lg btn-primary" @onclick="@StartSimulation">Start</button>
    </div>
    <div class="row">
        @if (Player1.Lives == 0)
        {
            <h3>Player2 Win this battle!</h3>
        }
        @if (Player2.Lives == 0)
        {
            <h3>Player1 Win this battle!</h3>
        }
    </div>
</div>





@code {
    Player Player1 { get; set; }
    Player Player2 { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Player1 = new Player()
        {
            Lives = 17,
            IsMyTurn = true
        };
        Player2 = new Player()
        {
            Lives = 17,
            IsMyTurn = false
        };

        await GameMechanics.DataGenerator.GenerateBoard(Player1);
        await GameMechanics.DataGenerator.GenerateBoard(Player2);

        await GameMechanics.DataGenerator.GenerateShips(Player1);
        await GameMechanics.DataGenerator.GenerateShips(Player2);
    }

    async Task StartSimulation()
    {
        while (Player1.Lives > 0 || Player2.Lives > 0 )
        {
            if (Player1.IsMyTurn == true)
            {
                await Shot(Player2);
                Player2.IsMyTurn = true;
                Player1.IsMyTurn = false;
                await Wait();
                StateHasChanged();

                if (Player2.Lives == 0)
                {
                        break;
                }
            }



            if (Player2.IsMyTurn == true)
            {
                await Shot(Player1);
                Player1.IsMyTurn = true;
                Player2.IsMyTurn = false;
                await Wait();
                StateHasChanged();

                if (Player1.Lives == 0)
                {
                        break;
                }
            }


        }

    }

    async Task Shot(Player player)
    {
        var rnd = new Random();

        var availablecells = player.Cells.Where(x => !x.IsHit && !x.IsMiss).ToList();

        int indexcount = availablecells.Count();

        await GameMechanics.DataGenerator.SelectCell(availablecells.ElementAt(rnd.Next(0, indexcount)), player);

    }

    async Task Wait()
    {
        await Task.Delay(1000);
    }
}